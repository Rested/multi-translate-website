import React from 'react';
import {
    Grid,
    AccordionSummary,
    Accordion,
    AccordionDetails,
    Typography,
    Card,
    CardContent
} from "@material-ui/core";
import ExpandMoreIcon from '@material-ui/icons/ExpandMore';
import StarIcon from '@material-ui/icons/Star';
import SaveAltIcon from '@material-ui/icons/SaveAlt';
import AutorenewIcon from '@material-ui/icons/Autorenew';


const FAQs = [{
    title: "Who is Multi-Translate for?",
    answer: `Multi-Translate is a tool for organisations and individuals looking for a self contained, unified 
    interface for getting the best possible translations for their applications and customers, regardless of language. 
    Why integrate with a single translation API when you can get the most out of all of them!
    `
}, {
    title: "How can I install it?",
    answer: (<React.Fragment>
        <Typography>The primary way to install is through the provided helm package, see
            {' '}<a href="https://github.com/rekon-oss/multi-translate#installation">the instructions on github</a> to
            get
            started. If you require assistance in getting started see <a href="#support">our support page</a>.
        </Typography>
    </React.Fragment>)
}, {
    title: "Where can I find API documentation?",
    answer: (<React.Fragment>
        <Typography>
            You can check the docs of the public api serving this site here:
            <ul>
                <li><a href="https://multi-translate-public-api.rekon.uk/docs">OpenAPI</a></li>
                <li><a href="https://multi-translate-public-api.rekon.uk/redoc">Redoc</a></li>
                <li><a href="https://multi-translate-public-api.rekon.uk/gql">GraphiQL</a></li>
            </ul>
            Autogenerated documentation will also be present in the <a
            href="https://github.com/rekon-oss/multi-translate/blob/master/clients/README.md#Examples">generated
            clients</a>.
        </Typography>
    </React.Fragment>)
}, {
    title: "Does Multi-Translate have feature X?",
    answer: (<Typography>
        Multi-Translate's current features are documented here and on Github. If you would like new features to be
        implemented one option enquire about support and we will build the feature out for you. Alternatively, you
        can create a feature request <a href="https://github.com/rekon-oss/multi-translate/issues">issue on Github</a>
        {' '}or even contribute a Pull Request!
    </Typography>)
}, {
    title: "What license does it have?",
    answer: <Typography>Multi-Translate is licensed under the permissive <a
        href="https://github.com/rekon-oss/multi-translate/blob/master/LICENSE.md">MIT license</a></Typography>
}]

const pStyles = {padding: "0.2em 0"}


export default function About() {
    return <Grid container spacing={3}>
        <Grid item xs={12} sm={6}>
            <Typography variant="h3" color="textSecondary">About</Typography>
            <Card>
                <CardContent>
                    <Typography variant="h5">
                        In a nutshell
                    </Typography>
                    <Typography variant="h6">
                        Multi-Translate is a unified interface on top of various translate APIs providing
                        <ul style={{listStyleType: "none"}}>
                            <li><StarIcon style={{verticalAlign: "middle"}} fontSize="inherit"/> Optimal translations
                            </li>
                            <li><SaveAltIcon style={{verticalAlign: "middle"}} fontSize="inherit"/> Persistence</li>
                            <li><AutorenewIcon style={{verticalAlign: "middle"}} fontSize="inherit"/> Fallback</li>
                        </ul>
                        It is intended as a drop in replacement in any
                        situation where you would integrate with an external translation API. With Multi-Translate
                        you integrate once and get all the best of all the external translation APIs. Additionally you
                        avoid expensive repeated requests with the built in persistence, and introduce redundancy
                        with the ability to fallback to another service when a request fails.
                    </Typography>
                    <Typography variant="h5">Technical Details</Typography>
                    <Typography style={pStyles}>
                        Multi-Translate uses FastApi and asyncpg to keep things snappy zap, and offers graphql and json
                        endpoints. The persistence is provided by postgres, and redis is used for rate limiting.
                    </Typography>

                    <Typography variant="h5">Features</Typography>
                    <Typography variant="h6">Optimal Translations</Typography>
                    <Typography style={pStyles}>
                        Multi-translate aims to provide optimal translations for the given language pair. It does this
                        by
                        combining the strengths of the Amazon, Deep L, Google, Microsoft, Naver Papago, and Yandex
                        translation APIs.
                    </Typography>
                    <Typography style={pStyles}>
                        User's can specify which engine they want to use with the preferred_engine parameter. However
                        there
                        is also the default value of best for this field.
                    </Typography>
                    <Typography style={pStyles}>
                        When best is used, the first suitable engines will be filtered out based on required
                        capabilities -
                        for instance if from_language is not specified and detection is required then engines which do
                        not
                        support detection will be eliminated. Similarly when with_alignment is set to true engines which
                        don't support alignment will be eliminated. Finally, if the language pair is not supported for
                        an
                        engine it will be eliminated.
                    </Typography>
                    <Typography style={pStyles}>
                        The controller will use then language_preferences.yaml (which is configurable) to look up the
                        best
                        translation engine for the from/to language combination based on the remaining languages. The
                        default preferences are listed in default_preferred.md.
                    </Typography>
                    <Typography variant="h6">Persistence</Typography>
                    <Typography style={pStyles}>
                        When a result is fetched for a particular engine, language, feature, and source text, it will be
                        stored in a postgres database, if it has been fetched before, it will be retrieved from the
                        database
                        instead to avoid unnecessary usage charges. The write to the database takes place after the
                        response
                        is returned to keep responses fast zap.
                    </Typography>
                    <Typography variant="h6">Fallback</Typography>
                    <Typography style={pStyles}>
                        The fallback option can be used so that if a result fails for the specified engine, for whatever
                        reason, then the next best valid engine in the list will be chosen.
                    </Typography>
                </CardContent>
            </Card>
        </Grid>
        <Grid item xs={12} sm={6}>
            <Typography variant="h3" color="textSecondary">FAQs</Typography>
            {FAQs.map(({title, answer}) => (<Accordion>
                <AccordionSummary
                    expandIcon={<ExpandMoreIcon/>}
                    aria-controls="panel1a-content"
                    id="panel1a-header"
                >
                    <Typography>{title}</Typography>
                </AccordionSummary>
                <AccordionDetails>
                    {typeof answer === "string" ? <Typography>
                        {answer}
                    </Typography> : answer}
                </AccordionDetails>
            </Accordion>))}
        </Grid>
    </Grid>
}